Class M79Proj_Base : Actor
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 50;
		+RANDOMIZE
		+DEHEXPLOSION
		+MISSILE
		Scale 0.35;
		Mass 40;
	}
	States
	{
	Spawn:
		GRND A 1;
		Loop;
	}
}

Class M79Proj_Grenade : M79Proj_Base
{
	Default
	{
		Damage 20;
		DeathSound "Weapons/M79/Grenade";
		Obituary "%k played some hot ball toss at %o.";
	}
	States
	{
	Death:
		TNT1 A 0 A_JumpIf(WaterLevel >= 2, "UnderWater");
		TNT1 A 0
		{
			A_Explode(128,128,XF_HURTSOURCE);
			{ bNOGRAVITY = True; bSPRITEFLIP = Random(0,1); }
			A_SetScale(0.6,0.6);
			Return A_Jump(256,1,16);
		}
		XPLD ABCDEFGHIJKLMNO 2;
		Stop;
		XPD2 ABCDEFGHIJK 2;
		Stop;
	UnderWater:
		TNT1 A 0 A_Explode(128,32);
		Stop;
	}
}

Class M79Proj_Flame : M79Proj_Base
{
	Default
	{
		Damage 5;
		DamageType "Fire";
		DeathSound "Weapons/M79/Flame";
		Obituary "$OB_GRENADE";
	}
	States
	{
	Death:
		TNT1 A 1
		{
			If(WaterLevel < 1)
			{
				For(int i; i<10; i++) { A_SpawnItemEx("BurningFlames_Big", random(0, 45), random(0, 55), 0, 0, 0, 0, random(0, 360)); }
				For(int i; i<20; i++) { A_SpawnItemEx("BurningFlames", random(0, 45), random(0, 55), 0, 0, 0, 0, random(0, 360)); }
				For(int i; i<40; i++) { A_SpawnItemEx("BurningFlames_Mini", random(0, 45), random(0, 55), 0, 0, 0, 0, random(0, 360)); }
				
				A_Explode(128,32);
			}
		}
		Stop;
	}
}

Class M79Proj_Acid : M79Proj_Base
{
	Default
	{
		Damage 20;
		+SKYEXPLODE
		+BRIGHT
		DeathSound "Weapons/M79/Acid";
		Obituary "%k played some hot ball toss at %o.";
		DamageType "PoisonCloud";
	}
	States
	{
	Death:
		TNT1 A 1
		{
			If(WaterLevel >= 2) { return; }
			Else
			{
				A_Explode(128,128);
				A_AlertMonsters(32);
				A_SpawnItemEx("AcidBomb");
			}
		}
		Stop;
	}
}

Class M79Proj_Freeze : M79Proj_Base
{
	Default
	{
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SHOOTABLE
		+SKYEXPLODE
		DeathSound "Weapons/M79/Freeze";
		Obituary "$OB_GRENADE";
		DamageType "Ice";
	}
	States
	{
	Death:
		TNT1 A 0 A_Explode(1, 128, 0, False, 128, 0, 0, "", "Normal"); // Break frozen things.
		TNT1 A 0
		{
			{ bNODAMAGETHRUST = False; }
			A_Explode(50*random(1,4),16,0); // Simulated impact damage
			A_Explode(128, 128, 0); // Freezy radius damage.
			
			For(int i; i<100; i++) { A_SpawnItemEx("FreezeSmoke", random(0, 50), random(0, 50), random(0, 50), random(0, 10)*0.1, random(0, 10)*0.1, random(0, 10)*0.1, random(0, 360)); }
			{ bNOGRAVITY = True; bSPRITEFLIP = Random(0,1); }
			A_SetTranslation("Ice");
			A_SetScale(1);
			A_SetRenderStyle(0.3, STYLE_Add);
		}   
		FRPT A 1
		{
			A_SetScale(Scale.X + 0.05, Scale.Y + 0.05);
			A_FadeOut(0.025);		
			Return A_JumpIf(Scale.X <= 0, "Null");
		}
		Wait;
	}
}

Class M79Proj_Gas : M79Proj_Base
{
	Default
	{
		+PAINLESS
		+SKYEXPLODE
	}
	States
	{
	Death:
		TNT1 A 1 Bright
		{
			Int radius = 128;
			Let iterator = BlockThingsIterator.Create(Self, radius);
			Actor next;
			While(iterator.next())
			{
				next = iterator.thing;
				If(next.bISMONSTER && !next.bFRIENDLY && next.Health > 1)	{ next.Health *= 0.5; }
			}
			If(WaterLevel < 1) { For(int i; i<100; i++) { A_SpawnItemEx("GasCloud", random(0, 50), random(0, 50), random(0, 50), random(0, 10)*0.1, random(0, 10)*0.1, random(0, 10)*0.1, random(0, 360)); } }
		}
		Stop; 
	}
}

//Credit EmeraldCoasttt (Emerald#7486) for the sticky grenade from Brutal Doom Platinum
Class M79Proj_Mine : Actor
{
	Default
	{
		PROJECTILE;
		+PAINLESS
		+FORCEXYBILLBOARD
		+HITTRACER
		+SKYEXPLODE
		Translation "Scorched";
	}
	Vector3 stickOfs;
    Double stickAngle;
	Int Timer;
	Bool stuck, exploded;
	Override Void Tick()
	{
		Super.Tick();
		If(Timer > 125 && !exploded) { SetStateLabel("Explode"); A_SetTranslation(""); Timer = 0; } // Level.Time % 4 == 0
		Timer++;
	}
	Override Void PostBeginPlay()
	{
		If(FindInventory("PowerInfiniteAmmo") || sv_infiniteammo) { bNOGRAVITY = True; bSEEKERMISSILE = True;  bSCREENSEEKER = True; }
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		GRND A 1
		{
			Tracer = null;
			If(FindInventory("PowerInfiniteAmmo") || sv_infiniteammo) { A_SeekerMissile(28,28,SMF_LOOK|SMF_CURSPEED,256); }
		}
		Loop;

	XDeath:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(FindInventory("PowerInfiniteAmmo") || sv_infiniteammo, "Explode");
		TNT1 A 0 A_StartSound("StickyGrenade/Hit");
		TNT1 A 0
		{
			stuck = True;

			If(Tracer)
			{
				Tracer.A_Pain();
				stickOfs = Tracer.Vec3To(Self);
				stickAngle = Tracer.angle;
			}
			If(!Tracer) { SetStateLabel("Fall"); }
		}
	Stuck:
		GRND A 1
		{
			If(!Tracer || Tracer.Health < 1) { SetStateLabel("Fall"); }

			If(Tracer && Tracer.Health > 0)
			{
				Double angDiff = DeltaAngle(stickAngle, Tracer.angle);
				If(angDiff)
				{
					stickOfs.xy = RotateVector(stickOfs.xy, angDiff);
					angle += angDiff;
				}
				SetOrigin(Tracer.Vec3Offset(stickOfs.x, stickOfs.y, stickOfs.z), True);
				stickAngle = Tracer.angle;
			}
		}
		Loop;
		
	Death:
		TNT1 A 0
		{
			A_StartSound("StickyGrenade/Hit");
			Tracer = null;
		}
		TNT1 A 0 A_CheckFloor("DeathFloor");
		TNT1 A 0 A_CheckCeiling("DeathCeiling");
		TNT1 A 0 { bNOGRAVITY = True; }
	StayDead:
	DeathFloor:
		GRND A 1;
		Loop;
	DeathCeiling:
		TNT1 A 0
		{
			bNOGRAVITY = True;
			vel.z = 6;
		}
		GRND A 1;
		Loop;

	Explode:
		TNT1 A 0 { If(Tracer && stuck) { A_DamageTracer(FRandom(120,200),"Normal"); } }
		TNT1 A 0 A_JumpIf(WaterLevel >= 2, "UnderWater");
		TNT1 A 0;
		TNT1 A 0 { A_Explode(128,128,XF_HURTSOURCE); A_AlertMonsters(); bNOGRAVITY = True; }
		TNT1 AAAAAAAAAAA 0 A_SpawnProjectile("Explarticles", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 0 A_SetTranslucent(0.65,1);
		ARX4 ABC 2 Bright A_SetScale(1.0);
		#### DEF 2 Bright A_SetScale(1.05);
		#### GHI 2 Bright A_SetScale(1.1);
		#### JKL 2 Bright A_SetScale(1.15);
		#### MNO 2 Bright A_SetScale(1.2);
		Stop;
	UnderWater:
		TNT1 A 0 A_Explode(128,32);
		Stop;

	Fall:
		TNT1 A 0
		{
			Tracer = null;
			bNOGRAVITY = False;
		}
		Goto DeathFloor;
	}
}
