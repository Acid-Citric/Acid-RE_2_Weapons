Class SparkShot : REWeapon
{
	Default
	{
		Inventory.Icon "WPAPA0";

		Weapon.SelectionOrder 100;
		Weapon.AmmoType "WPAAmmo";
		Weapon.AmmoType2 "SparkShotRound";
		Inventory.PickupMessage "SparkShot";
		Tag "SparkShot";
		Scale 0.7;
	}
	Override Void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		other.A_GiveInventory("WPAAmmo", MAG_SPARK);
	}
	Override Bool TryPickup(in out Actor toucher)
    {
		If(toucher)
		{
			Let weap = toucher.FindInventory("SparkShot");
			If(!weap) { Self.AmmoGive2 = 0; }
			Else { Self.AmmoGive2 = 1; }
		}
			Return Super.TryPickup(toucher);
  	}
	States
	{
	Spawn:
		WPAP A 9;
		#### # 1 Bright;
		Loop;
	Select:
		WPAG A 0;
		Goto Raise;
	Ready:
		WPAG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Deselect:
		#### # 0;
		Goto Lower;
	Fire:
		TNT1 A 0 A_JumpIf(!CountInv("WPAAmmo"), "Reload");
		WPAG A 1 Bright
		{
			A_StartSound("Weapons/SparkShot/Fire", CHAN_WEAPON);
			A_AlertMonsters();		
			A_RailAttack(500,3,False,"","DD DD FF",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,1,"BulletPuff", 0, 0, 8192, 35, 64.0, 0.5, "SparshotTracer");
			//A_RailAttack(0,3,False,"","DD DD FF",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,1,"BulletPuff", 0, 0, 0, 35, 64.0, 0.5,"SparshotTracerB");
			A_TakeInventory("WPAAmmo",1);
			
			A_SetPitch(Pitch - 0.16, SPF_INTERPOLATE);
			
			A_WeaponOffset(random(0,1),random(32,33),WOF_INTERPOLATE);
		}
		#### A 34 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;

	Empty:
		WPAG A 3 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;

	Reload:
		TNT1 A 0 A_JumpIfInventory("WPAAmmo", MAG_SPARK, "Ready");
		TNT1 A 0 A_JumpIf(CountInv("SparkShotRound") >= 0 || CountInv("PowerInfiniteAmmo"), "ReloadWork");
		TNT1 A 0;
		Goto Empty;
	ReloadWork:
		// 40 tics
		WPAG AAAAAAA 1 // 7 tics
		{
			//Tilt the gun to the right, offset and scale it:
			A_OverlayRotate(PSP_WEAPON,-2,WOF_ADD);
			A_OverlayOffset(PSP_WEAPON,6,3,WOF_ADD);
			A_OverlayScale(PSP_WEAPON,0.015,0.015,WOF_ADD);
		}
		#### B 16;
		#### B 1
		{
			//Play reload sound and jerk the gun upward:
			A_OverlayOffset(PSP_WEAPON,0,4,WOF_ADD);
			A_StartSound("misc/w_pkup",CHAN_AUTO);
		}
		#### B 0
		{
			A_StartSound("Weapons/SparkShot/Reload", CHAN_WEAPON);

			While(CountInv("SparkShotRound") > 0 && CountInv("WPAAmmo") < MAG_SPARK)
			{
				If(!CountInv("PowerInfiniteAmmo")) { A_TakeInventory("SparkShotRound", 1, TIF_NOTAKEINFINITE); }
				A_GiveInventory("WPAAmmo", MAG_SPARK);
			}
		}
		//now lower the gun as if we've inserted a magazine:
		#### AAAA 1 A_OverlayOffset(PSP_WEAPON,0,-1,WOF_ADD); // 4 tics
		#### A 5;
		#### AAAAAAA 1 // 7 tics
		{
			//Restore the gun's angle, offset and scale:
			A_OverlayRotate(PSP_WEAPON,2,WOF_ADD);
			A_OverlayOffset(PSP_WEAPON,-6,-3,WOF_ADD);
			A_OverlayScale(PSP_WEAPON,-0.015,-0.015,WOF_ADD);
		}
		Goto Ready;
	}
}

Class WPAAmmo : Ammo
{
	Default
	{
		Inventory.MaxAmount MAG_SPARK;
		+INVENTORY.IGNORESKILL
	}
}

Class SparshotTracer : Actor
{
	Default
	{
		+BRIGHT
		+NOINTERACTION
		//+FLATSPRITE
		RenderStyle "Add";
		Alpha 1;
		Scale 1;
	}
	States
	{
	Spawn: //coding's from Trailblazer by Pillowblaster
		TNT1 A 0 NoDelay; // A_SetPitch(Pitch + 90);
		PLSE E 1 Bright
		{
			A_FadeOut(0.05);
			//A_SetScale(Scale.X - 0.1);
			Return A_JumpIf(Alpha <= 0, "Null");
		}
		Wait;
	}
}
class SparshotTracerB : SparshotTracer
{
	Default	{ /*-FLATSPRITE*/ }
	
	States
	{
	Spawn:
		PLSE E 1 Bright
		{
			A_FadeOut(0.05);
			Return A_JumpIf(Alpha <= 0, "Null");
		}
		Loop;
	}
}
