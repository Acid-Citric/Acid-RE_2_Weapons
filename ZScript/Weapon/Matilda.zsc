Class Matilda : REWeapon
{	
	Default
	{
		Inventory.Icon "WP1PA0";

		Weapon.SelectionOrder 1900;
		Weapon.AmmoType "WP1Ammo";
		Weapon.AmmoType2 "HandgunAmmo";
		+WEAPON.NOALERT
		Inventory.PickupMessage "H&K VP70";
		Obituary "$OB_MPPISTOL";
		Tag "H&K VP70";
		Scale 0.2;
		+INVENTORY.UNDROPPABLE
	}
	Override Void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		other.A_GiveInventory("WP1Ammo",MAG_VP70);
	}
	Override Bool TryPickup(in out Actor toucher)
	{
		If(toucher)
		{
			Let weap = toucher.FindInventory("Matilda");
			If(!weap) { Self.AmmoGive2 = 0; }
			Else { Self.AmmoGive2 = MAG_VP70; }
		}
			Return Super.TryPickup(toucher);
	}
	Override Bool HandlePickup(Inventory i)
	{
		//save ammo
		let old_ammo2 = ammo2;
		let old_ammotype2 = ammotype2;

		//set ammo to pickup ammo type
		ammo2 = Ammo(owner.FindInventory("HandgunAmmo"));
		ammotype2 = "HandgunAmmo";

		bool ok = super.HandlePickup(i);

		//restore ammo
		ammo2 = old_ammo2;
		ammotype2 = old_ammotype2;

		return ok;
	}
	Override Void PostBeginPlay()
	{
		flashlight = False;
		Super.PostBeginPlay();
	}
	Bool flashlight, altammo;
	States
	{
	Spawn:
		WP1P A 9;
		#### # 1 Bright;
		Loop;
	Select:
		WP1G A 0;
		Goto Raise;
	Ready:
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 1
		{
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER1);
			
			If(Invoker.flashlight == False) { A_ClearOverlays(3,3); }
			Else { A_Overlay(3,"FlashLight"); }
		}
		Loop;
	Deselect:
		#### # 0;
		Goto Lower;
	Fire:
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == 0, "Reload");
		WP1F A 2 Bright
		{
			A_AlertMonsters();
			If(Invoker.altammo) A_FireBullets(1, 1, 1, random(18,20), "SuperPuff"); // Kickback 150
			Else A_FireBullets(1, 1, 1, random(15,20), "BulletPuff_2", FBF_NORANDOM);
			A_StartSound("Weapons/VP70/Fire", CHAN_WEAPON);

			A_SetPitch(Pitch - 0.4, SPF_INTERPOLATE); // -40 % = 60 pts of stability

			A_TakeInventory(Invoker.ammo1.GetClass(), 1);
		}
		WP1F B 1;
		WP1F C 1 A_SpawnItemEx("RE_PistolCasing",24,-24,40*GetCrouchFactor(AAPTR_Default),8,2,4,random(-55,-80),SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
		WP1F B 1;
		WP1G A 2;
		Goto Ready;
	Flash:
		TNT1 A 0;
		Goto LightDone;

	AltFire:
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 2 A_WeaponOffset(1,33,WOF_INTERPOLATE);
		#### # 2
		{
			A_WeaponOffset(3,35,WOF_INTERPOLATE);

			If(Invoker.flashlight == True) { Invoker.flashlight = False; }
			Else If(Invoker.flashlight == False) { Invoker.flashlight = True; }
		}
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 2 A_WeaponOffset(1,33,WOF_INTERPOLATE);
		Goto Ready;

	Reload:
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == MAG_VP70, 2);
		TNT1 A 0 A_JumpIf(Invoker.ammo2.amount > 0 || CountInv("PowerInfiniteAmmo"), "ReloadWork");
		TNT1 A 0;
		Goto Ready;
	ReloadWork:
		WP1R A 2; 
		WP1R B 2 A_StartSound("Weapons/VP70/Unload", CHAN_WEAPON);
		WP1R C 5;
		WP1R DEFG 2;
		WP1R H 2 A_StartSound("Weapons/VP70/Reload", CHAN_WEAPON);
		WP1R IJKLMNOPQ 2;
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 1;
	ReloadLoop:
		TNT1 A 0
		{
			TakeInventory(Invoker.ammo2.GetClass(), 1, False, True); //take 1 of AmmoType2
			GiveInventory(Invoker.ammo1.GetClass(), 1); //give 1 of AmmoType1
		}
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == MAG_VP70, 2);
		TNT1 A 0 A_JumpIf(Invoker.ammo2.amount > 0 || CountInv("PowerInfiniteAmmo"), "ReloadLoop");
		TNT1 A 0;
		Goto Ready;
	
	User1:
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 1;
		#### # 0 A_JumpIf((CountInv("HandgunAmmo") > 0 && CountInv("E_HandgunAmmo") > 0) || CountInv("PowerInfiniteAmmo"), 1);
		Goto Ready;
		#### # 2
		{
			// Credits goes to RicardoLuis0#1862, said it's basic math, but I rather give to Ceasar what's belong to Ceasar.
			int final_ammo = invoker.ammo2.amount + invoker.ammo1.amount;

			if(final_ammo > invoker.ammo2.maxamount)
			{
				int leftover = final_ammo - invoker.ammo2.maxamount;

				invoker.ammo2.amount = invoker.ammo2.maxamount;
				invoker.ammo1.amount = 0;

				A_DropItem(invoker.ammotype2, leftover);
				//RE_SpawnSpareAmmo(invoker.ammotype2, leftover, 0,0,30,frandom(8,12),0,0,frandom(-22,22));
			}
			else
			{
				invoker.ammo2.amount = final_ammo;
				invoker.ammo1.amount = 0;
			}
		}
		#### # 2
		{
			If(Invoker.altammo == True)
			{
				Invoker.altammo = False;
				SetAmmoType1(True, "WP1Ammo");
				SetAmmoType2(True, "HandgunAmmo");
			}
            Else If(Invoker.altammo == False)
			{
				Invoker.altammo = True;
				SetAmmoType1(True, "WP1AmmoB");
				SetAmmoType2(True, "E_HandgunAmmo");
			}
		}
		WP1G B 0 A_JumpIf(Invoker.flashlight, 2);
		WP1G A 0;
		#### # 2;
		Goto Reload;
	FlashLight:
		TNT1 A 1 BRIGHT A_FireBullets(0,0,0,0,"FlashLightPuff",FBF_NOFLASH|FBF_NORANDOMPUFFZ);
		Loop;
	}
}

Class WP1Ammo : Ammo
{
	Default
	{
		Inventory.MaxAmount MAG_VP70;
		+INVENTORY.IGNORESKILL
	}
}
Class WP1AmmoB : Ammo
{
	Default
	{
		Inventory.MaxAmount MAG_VP70;
		+INVENTORY.IGNORESKILL
	}
}

Class FlashLightPuff : FastProjectile
{
	Default
	{
		+NODECAL
		+NOCLIP
		+NOBLOCKMAP
		+BLOODLESSIMPACT
		+DONTSPLASH
		+PUFFONACTORS
		+NOTIMEFREEZE
		+NOTELEPORT
		-ACTIVATEMCROSS
		Radius 1;
		Height 1;
		Speed 100;
		PROJECTILE;
	}
	States
	{
	Spawn:
		TNT1 A 0;
	Melee:
	Death: 
		TNT1 A 2 Light("FlashLight");
		Stop;
	}
}
