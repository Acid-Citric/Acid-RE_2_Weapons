Class GM79 : REWeapon
{
	Default
	{
		Inventory.Icon "WP5PA0";
		Weapon.SelectionOrder 2500;
		Weapon.AmmoType "WP5Ammo";
		Weapon.AmmoType2 "GrenadeRounds";
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "GM79";
		Tag "GM79";
		Scale 0.3;
	}
	Override Void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		other.A_GiveInventory("WP5Ammo",1);
	}
   	Override Bool TryPickup(in out Actor toucher)
    {
		If(toucher)
		{
			Let weap = toucher.FindInventory("GM79");
			If(!weap) { Self.AmmoGive2 = 0; }
			Else { Self.AmmoGive2 = 1; }
		}
			Return Super.TryPickup(toucher);
	}
	Override Bool HandlePickup(Inventory i)
	{
		//save ammo
		let old_ammo2 = ammo2;
		let old_ammotype2 = ammotype2;

		//set ammo to pickup ammo type
		ammo2 = Ammo(owner.FindInventory("GrenadeRounds"));
		ammotype2 = "GrenadeRounds";

		bool ok = super.HandlePickup(i);

		//restore ammo
		ammo2 = old_ammo2;
		ammotype2 = old_ammotype2;

		return ok;
	}
	Bool Flame, Acid, Freeze, Gas, Empty;
	States
	{
	Spawn:
		WP5P A 9;
		#### # 1 Bright;
		Loop;
	Select:
		WP5G A 0;
		Goto Raise;
	Ready:
		WP5G A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		Loop;
	Deselect:
		#### # 0;
		Goto Lower;
	Fire:
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == 0, "Reload");
		WP5F A 3
		{
			A_StartSound("Weapons/M79/Fire", CHAN_WEAPON);
			A_AlertMonsters();
			FireRE2GL();
			A_SetPitch(Pitch - 0.08, SPF_INTERPOLATE); // -8 % = 92 pts of stability
		}
		#### BCD 3;
		TNT1 A 0 A_JumpIf(Invoker.ammo2.amount == 0 && !CountInv("PowerInfiniteAmmo"), "Empty");
	Reload:
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == 1, 2);
		TNT1 A 0 A_JumpIf(Invoker.ammo2.amount > 0 || CountInv("PowerInfiniteAmmo"), "ReloadWork");
		TNT1 A 0;
		Goto Ready;
	ReloadWork:
		//TNT1 A 0 A_JumpIf(Invoker.Sticky, "ReloadMine");
		WP5R A 3;
		#### B 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		//#### X 3;
		#### CDEFGHI 3;
		#### J 12 { If(Invoker.Empty == True) A_FireProjectile("RE_GrenadeCasing",3,False,5); }
		#### KLMN 3;
		#### O 3
		{
			A_StartSound("weapons/sshotl", CHAN_WEAPON);
			If(!CountInv("PowerInfiniteAmmo")) { TakeInventory(Invoker.ammo2.GetClass(), 1, False, True); }
			GiveInventory(Invoker.ammo1.GetClass(), 1);
			Invoker.Empty = False;
		}
		#### PQ 3;
		#### R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		//#### Y 3;
		#### S 3;
		Goto Ready;
	SwitchAmmo:
		TNT1 A 0 A_JumpIf(Invoker.ammo1.amount == 0, "Reload");
		WP5R A 3;
		#### B 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		#### CDE 3;
		#### N 3; // no ammo
		#### MLK 3;
		#### J 12;
		#### KLMN 3;
		#### O 3 A_StartSound("weapons/sshotl", CHAN_WEAPON); // load
		#### PQ 3;
		#### R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		#### S 3;
		Goto Ready;
	/*ReloadMine:
		WP5G A 3;
		WP5R S 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		#### ZJKLMN 3;
		#### O 3 { A_StartSound("weapons/sshotl", CHAN_WEAPON); Invoker.noammo = False; }
		#### PQ 3;
		#### R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		#### YS 3;
		Goto Ready;*/

	Empty:
		WP5G A 0 A_StartSound("Weapons/M79/Dry", CHAN_WEAPON);
		#### A 3 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;

	User1:
		#### A 0 A_JumpIf(CountInv("PowerInfiniteAmmo"), 2);
		#### A 0 A_JumpIf(!CountInv("FlameRounds"), "Empty");
		#### # 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Flame == False)
			{
				SetAmmoType1(True, "WP5AmmoB");
				SetAmmoType2(True, "FlameRounds");
				Invoker.Flame = True; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[Red]Incendiary rounds selected\c-");
			}
			Else If(Invoker.Flame == True)
			{
				SetAmmoType1(True, "WP5Ammo");
				SetAmmoType2(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User2:
		#### A 0 A_JumpIf(CountInv("PowerInfiniteAmmo"), 2);
		#### A 0 A_JumpIf(!CountInv("AcidRounds"), "Empty");
		#### # 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Acid == False)
			{
				SetAmmoType1(True, "WP5AmmoC");
				SetAmmoType2(True, "AcidRounds");
				Invoker.Flame = False; Invoker.Acid = True; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[Yellow]Acid rounds selected\c-");
			}
			Else If(Invoker.Acid == True)
			{
				SetAmmoType1(True, "WP5Ammo");
				SetAmmoType2(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User3:
		#### A 0 A_JumpIf(CountInv("PowerInfiniteAmmo"), 2);
		#### A 0 A_JumpIf(!CountInv("FreezeRounds"), "Empty");
		#### # 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Freeze == False)
			{
				SetAmmoType1(True, "WP5AmmoD");
				SetAmmoType2(True, "FreezeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = True; Invoker.Gas = False;
				A_Log("\c[Blue]Freeze rounds selected\c-");
			}
			Else If(Invoker.Freeze == True)
			{
				SetAmmoType1(True, "WP5Ammo");
				SetAmmoType2(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User4:
		#### A 0 A_JumpIf(CountInv("PowerInfiniteAmmo"), 2);
		#### A 0 A_JumpIf(!CountInv("GasRounds"), "Empty"); // MineRounds
		#### # 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Gas == False)
			{
				SetAmmoType1(True, "WP5AmmoE");
				SetAmmoType2(True, "GasRounds"); // MineRounds
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = True;
				A_Log("\c[Green]B.O.W Gas rounds selected\c-");
			}
			Else If(Invoker.Gas == True)
			{
				SetAmmoType1(True, "WP5Ammo");
				SetAmmoType2(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Gas = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	}

	Action Void FireRE2GL()
	{
		If(Invoker.Flame == True) { A_FireProjectile("M79Proj_Flame",0,False,8,8); }
		Else If(Invoker.Acid == True) { A_FireProjectile("M79Proj_Acid",0,False,8,8); }
		Else If(Invoker.Freeze == True) { A_FireProjectile("M79Proj_Freeze",0,False,8,8); }
		Else If(Invoker.Gas == True) { A_FireProjectile("M79Proj_Gas",0,False,8,8); } // M79Proj_Mine
		Else { A_FireProjectile("M79Proj_Grenade",0,False,8,8); }

		A_TakeInventory(invoker.ammo1.GetClass(), 1);
		Invoker.Empty = True;
	}
}
Class WP5Ammo : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
Class WP5AmmoB : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
Class WP5AmmoC : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
Class WP5AmmoD : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
Class WP5AmmoE : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
