Class GM79 : REWeapon
{
	Default
	{
		Inventory.Icon "WP5PA0";

		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 1;
		Weapon.AmmoType "GrenadeRounds";
		+WEAPON.NOAUTOFIRE
		+WEAPON.AMMO_OPTIONAL
		Inventory.PickupMessage "GM79";
		Tag "GM79";
		Scale 0.3;
	}
	Override Void PostBeginPlay()
	{
		Flame = False;
		Acid = False;
		Freeze = False;
		Sticky = False;	
		noammo = False;
		Super.PostBeginPlay();
	}
	Bool Flame, Acid, Freeze, Sticky, noammo;
	States
	{
	Spawn:
		WP5P A 30;
		WP5P A 2 Bright;
		Loop;
	Select:
		WP5G A 0 { If(Invoker.Ammo1.Amount > 0 || CountInv("PowerInfiniteAmmo")) { Invoker.noammo = False; } Else { Invoker.noammo = True; } }
		Goto Raise;
	Ready:
		WP5G A 1 A_WeaponReady(WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		TNT1 A 0 { If(Invoker.Ammo1.Amount > 0 || CountInv("PowerInfiniteAmmo")) { Invoker.noammo = False; } Else { Invoker.noammo = True; } }
		Loop;
	Deselect:
		"####" "#" 0;
		Goto Lower;
	Fire:
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount < 1 && !CountInv("PowerInfiniteAmmo"), "Empty"); // || Invoker.Ammo1.Amount < 1 && !sv_infiniteammo
		WP5F A 3
		{
			A_StartSound("Weapons/M79/Fire", CHAN_WEAPON);
			A_AlertMonsters();
			FireRE2GL();
			Invoker.noammo = True;
			A_SetPitch(pitch-0.08, SPF_INTERPOLATE); // -8 % = 92 pts of stability
		}
		WP5F BCD 3;
		TNT1 A 0 A_JumpIf(Invoker.Ammo1.Amount < 1 && !CountInv("PowerInfiniteAmmo"), "Empty"); // || Invoker.Ammo1.Amount < 1 && !sv_infiniteammo
	Reload:
		//TNT1 A 0 A_JumpIf(Invoker.Sticky, "ReloadMine");
		WP5R A 3;
		WP5R B 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		//WP5R X 3;
		WP5R CDEFGHI 3;
		WP5R J 12;
		WP5R KLMN 3;
		WP5R O 3 { A_StartSound("weapons/sshotl", CHAN_WEAPON); Invoker.noammo = False; }
		WP5R PQ 3;
		WP5R R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		//WP5R Y 3;
		WP5R S 3;
		Goto Ready;
	SwitchAmmo:
		TNT1 A 0 A_JumpIf(Invoker.noammo,"Reload");
		WP5R A 3;
		WP5R B 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		WP5R CDE 3;
		WP5R N 3; // no ammo
		WP5R MLK 3;
		WP5R J 12;
		WP5R KLMN 3;
		WP5R O 3 A_StartSound("weapons/sshotl", CHAN_WEAPON); // load
		WP5R PQ 3;
		WP5R R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		WP5R S 3;
		Goto Ready;
	/*ReloadMine:
		WP5G A 3;
		WP5R S 3 A_StartSound("Weapons/M79/Open", CHAN_WEAPON);
		WP5R ZJKLMN 3;
		WP5R O 3 { A_StartSound("weapons/sshotl", CHAN_WEAPON); Invoker.noammo = False; }
		WP5R PQ 3;
		WP5R R 3 A_StartSound("Weapons/M79/Close", CHAN_WEAPON);
		WP5R YS 3;
		Goto Ready;*/

	Empty:
		WP5G A 0 A_StartSound("Weapons/M79/Dry", CHAN_WEAPON);
		WP5G A 3 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;

	/*Flash:
		TNT1 A 0;
		Goto LightDone;*/

	User1:
		WP5G A 0 A_JumpIf(sv_infiniteammo || FindInventory("PowerInfiniteAmmo",True), 2);
		WP5G A 0 A_JumpIf(!CountInv("FlameRounds"), "Empty");
		"####" "#" 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Flame == False)
			{
				SetAmmoType1(True, "FlameRounds");
				Invoker.Flame = True; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[Red]Incendiary rounds selected\c-");
			}
			Else If(Invoker.Flame == True)
			{
				SetAmmoType1(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User2:
		WP5G A 0 A_JumpIf(sv_infiniteammo || FindInventory("PowerInfiniteAmmo",True), 2);
		WP5G A 0 A_JumpIf(!CountInv("AcidRounds"), "Empty");
		"####" "#" 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Acid == False)
			{
				SetAmmoType1(True, "AcidRounds");
				Invoker.Flame = False; Invoker.Acid = True; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[Yellow]Acid rounds selected\c-");
			}
			Else If(Invoker.Acid == True)
			{
				SetAmmoType1(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User3:
		WP5G A 0 A_JumpIf(sv_infiniteammo || FindInventory("PowerInfiniteAmmo",True), 2);
		WP5G A 0 A_JumpIf(!CountInv("FreezeRounds"), "Empty");
		"####" "#" 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Freeze == False)
			{
				SetAmmoType1(True, "FreezeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = True; Invoker.Sticky = False;
				A_Log("\c[Blue]Freeze rounds selected\c-");
			}
			Else If(Invoker.Freeze == True)
			{
				SetAmmoType1(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	User4:
		WP5G A 0 A_JumpIf(sv_infiniteammo || FindInventory("PowerInfiniteAmmo",True), 2);
		WP5G A 0 A_JumpIf(!CountInv("MineRounds"), "Empty");
		"####" "#" 2
		{
			A_WeaponOffset(1,33,WOF_INTERPOLATE);

			If(Invoker.Sticky == False)
			{
				SetAmmoType1(True, "MineRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = True;
				A_Log("\c[Grey]Sticky rounds selected\c-");
			}
			Else If(Invoker.Sticky == True)
			{
				SetAmmoType1(True, "GrenadeRounds");
				Invoker.Flame = False; Invoker.Acid = False; Invoker.Freeze = False; Invoker.Sticky = False;
				A_Log("\c[White]Grenade rounds selected\c-");
			}
		}
		Goto SwitchAmmo;
	}

	Action Void FireRE2GL()
	{
		If(Invoker.Flame == True) { A_FireProjectile("M79FlameProj",0,True,8,8); }
		Else If(Invoker.Acid == True) { A_FireProjectile("M79AcidProj",0,True,8,8); }
		Else If(Invoker.Freeze == True) { A_FireProjectile("M79FreezeProj",0,True,8,8); }
		Else If(Invoker.Sticky == True) { A_FireProjectile("M79StickyProj",0,True,8,8); } 
		Else { A_FireProjectile("M79GrenadeProj",0,True,8,8); }
	}

	//Credit Agent_Ash aka Jekyll Grim Payne and Boondorl
	//Changes ammo type
	Action Void SetAmmoType1(bool set, Class<Ammo> AmmoClass)
	{
		If(set) 
		{
			Invoker.AmmoType1 = AmmoClass;
			Invoker.Ammo1 = Ammo(FindInventory(AmmoClass));
			Return;
		}
		Invoker.Ammo1 = null;
	}
}

//Credit EmeraldCoasttt (Emerald#7486) for the sticky grenade from Brutal Doom Platinum
Class M79StickyProj : Actor
{
	Default
	{
		Radius 4;
		Height 4;
		Speed 30;
		Gravity 0.4;
		+MISSILE
		+FORCEXYBILLBOARD
		+HITTRACER
		+SKYEXPLODE
		Scale 0.25;
		Translation "Scorched";
	}
	Vector3 stickOfs;
	Double stickAngle;
	Int Timer;
	Bool stuck, exploded;	
	Override Void Tick()
	{
		Super.Tick();
		If(Timer > 125 && !exploded) { SetStateLabel("Explode"); A_SetTranslation(""); Timer = 0; } // Level.Time % 4 == 0
		Timer++;
	}
	Override Void PostBeginPlay()
	{
		If(CountInv("PowerInfiniteAmmo") || sv_infiniteammo) { bSEEKERMISSILE = True;  bSCREENSEEKER = True; }
		Super.PostBeginPlay();
	}
	States
	{
	Spawn:
		GRND A 1
		{
			Tracer = null;
			If(CountInv("PowerInfiniteAmmo") || sv_infiniteammo) { A_SeekerMissile(9,6,SMF_LOOK|SMF_CURSPEED,75,10); }
		}
		Loop;

	XDeath:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(CountInv("PowerInfiniteAmmo") || sv_infiniteammo, "Explode");
		TNT1 A 0 A_StartSound("StickyGrenade/Hit");
		TNT1 A 0 
		{
			stuck = true;

			If(Tracer)
			{
				Tracer.A_Pain();
				stickOfs = Tracer.Vec3To(self);
				stickAngle = Tracer.angle;
			}
			If(!Tracer) { SetStateLabel("Fall"); }
		}
	Stuck:
		GRND A 1
		{
			If(!Tracer || Tracer.Health < 1) { SetStateLabel("Fall"); }
		
			If(Tracer && Tracer.Health > 0)
			{
				double angDiff = DeltaAngle(stickAngle, Tracer.angle);
				if(angDiff)
				{
					stickOfs.xy = RotateVector(stickOfs.xy, angDiff);
					angle += angDiff;
				}
				SetOrigin(Tracer.Vec3Offset(stickOfs.x, stickOfs.y, stickOfs.z), true);
				stickAngle = Tracer.angle;
			}
		}
		Loop;
	Death:
		TNT1 A 0 
		{
			A_StartSound("StickyGrenade/Hit");
			Tracer = null;
		}
		TNT1 A 0 A_CheckFloor("DeathFloor");
		TNT1 A 0 A_CheckCeiling("DeathCeiling");
		TNT1 A 0 { bNOGRAVITY = true; }
	StayDead:
	DeathFloor:
		GRND A 1;
		Loop;
	DeathCeiling:
		TNT1 A 0
		{
			bNOGRAVITY = True;
			vel.z = 6;
		}
		GRND A 1;
		Loop;
	Explode:
		TNT1 A 0 { If(Tracer && stuck) { A_DamageTracer(FRandom(120,200),"Normal"); } }
		TNT1 A 0 A_JumpIf(WaterLevel >= 2, "UnderWater");
		TNT1 A 0;
		TNT1 A 0 { A_Explode(128,128,XF_HURTSOURCE); A_AlertMonsters(); bNOGRAVITY = True; }
		TNT1 AAAAAAAAAAA 0 A_SpawnProjectile("Explarticles", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 0 A_SetTranslucent(0.65,1);
		ARX4 ABC 2 Bright A_SetScale(1.0);
		"####" DEF 2 Bright A_SetScale(1.05);
		"####" GHI 2 Bright A_SetScale(1.1);
		"####" JKL 2 Bright A_SetScale(1.15);
		"####" MNO 2 Bright A_SetScale(1.2);
		Stop;
	UnderWater:
		TNT1 A 0 A_Explode(128,32);
		Stop;
	Fall:
		TNT1 A 0
		{
			Tracer = null;
			bNOGRAVITY = False;
		}
		Goto DeathFloor;
	}
}
